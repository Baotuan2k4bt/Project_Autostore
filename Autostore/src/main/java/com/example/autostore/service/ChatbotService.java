package com.example.autostore.service;

import com.example.autostore.Enum.CarStatus;
import com.example.autostore.dto.CarDTO;
import com.example.autostore.dto.ChatbotResponseDTO;
import com.example.autostore.model.Car;
import com.example.autostore.repository.CarDataRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@RequiredArgsConstructor
public class ChatbotService {

    private final CarDataRepository carRepo;
    private final GeminiService geminiService;

    @Value("${chatbot.hotline}")
    private String hotline;

    public ChatbotResponseDTO answer(String question) {
        List<Car> cars = carRepo.findAvailableCars(CarStatus.AVAILABLE, null, null);

        if (cars.isEmpty()) {
            return new ChatbotResponseDTO(
                    "Hi·ªán t·∫°i ch∆∞a c√≥ xe n√†o ph√π h·ª£p üôè. B·∫°n vui l√≤ng li√™n h·ªá hotline " + hotline + " ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ nhanh nh·∫•t.",
                    List.of()
            );
        }

        List<CarDTO> carDtos = cars.stream().limit(3).map(c ->
                new CarDTO(
                        c.getBrand().getBrandName(),
                        c.getCarName(),
                        c.getCarType().getTypeName(),
                        c.getCarDetail().getSeatCount(),
                        c.getImageUrl()
                )
        ).toList();

        StringBuilder info = new StringBuilder("Danh s√°ch xe hi·ªán c√≥:\n");
        for (CarDTO dto : carDtos) {
            info.append("- ")
                    .append(dto.getBrand()).append(" ").append(dto.getName())
                    .append(" (").append(dto.getSeatCount()).append(" ch·ªó, ")
                    .append(dto.getType()).append(")\n");
        }

        String prompt = """
        B·∫°n l√† tr·ª£ l√Ω t∆∞ v·∫•n thu√™ xe Carbook.
        Tr·∫£ l·ªùi th√¢n thi·ªán, ng·∫Øn g·ªçn, t·ª± nhi√™n.
        N·∫øu kh√¥ng ch·∫Øc ch·∫Øn th√¨ h√£y khuy·∫øn kh√≠ch kh√°ch li√™n h·ªá hotline %s.
        
        D·ªØ li·ªáu xe hi·ªán c√≥:
        %s
        
        C√¢u h·ªèi c·ªßa kh√°ch: %s
        """.formatted(hotline, info, question);

        String answerText = geminiService.generateAnswer(prompt);

        // üîπ x·ª≠ l√Ω nhi·ªÅu tr∆∞·ªùng h·ª£p
        if (answerText == null || answerText.isBlank()) {
            answerText = "M√¨nh ch∆∞a c√≥ th√¥ng tin ch√≠nh x√°c üôè. Vui l√≤ng li√™n h·ªá hotline " + hotline + " ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£.";
        } else {
            String lower = answerText.toLowerCase();

            if (lower.contains("kh√¥ng c√≥ d·ªØ li·ªáu") || lower.contains("kh√¥ng th·ªÉ tr·∫£ l·ªùi") ||
                    lower.contains("t√¥i kh√¥ng c√≥") || lower.contains("xin l·ªói") || lower.contains("ai ng√¥n ng·ªØ")) {
                answerText = "Hi·ªán t·∫°i m√¨nh ch∆∞a r√µ th√¥ng tin b·∫°n c·∫ßn ü§î. B·∫°n c√≥ th·ªÉ tham kh·∫£o c√°c xe kh·∫£ d·ª•ng ho·∫∑c li√™n h·ªá hotline " + hotline + " ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n th√™m.";
            }

            // n·∫øu c√¢u tr·∫£ l·ªùi qu√° d√†i th√¨ c·∫Øt g·ªçn
            if (answerText.length() > 400) {
                answerText = answerText.substring(0, 380) + "... " +
                        "ƒê·ªÉ bi·∫øt th√™m chi ti·∫øt, h√£y g·ªçi hotline " + hotline + ".";
            }
        }

        return new ChatbotResponseDTO(answerText, carDtos);
    }
}
